<?php
/*
 * 漏洞管理
 */
class ExploitAction extends Action{
	/*
	 * 首页显示
	 */
	public function index(){
		$exploit	=	new PostsModel();
		import("ORG.Page");
		$count      = $exploit->count(); // 查询满足要求的总记录数
		$Page       = new Page($count,5); // 实例化分页类传入总记录数和每页显示的记录数

		$show       = $Page->show(); // 分页显示输出

		$list = $exploit->order('exp_ispub desc, id desc')->limit($Page->firstRow.','.$Page->listRows)->select();

		$this->assign('list',$list); // 赋值数据集
		
		$this->assign('page',$show); // 赋值分页输出
		
		
		echo $this->display('index');
	}
	
	public function modify(){
		$post	=	new PostsModel();
		$id	=	intval($_GET['id']);
		$sql	=	"select ep.id,exp_post_no,exp_post_title,ec.corps_id,eu.id as euid,ep.exp_post_time,ep.exp_hazard_rating,ep.exp_exploit_rank,ep.exp_exploit_status,ep.exp_description,
		ep.exp_email,ep.exp_ispub,ep.exp_author_id,ep.exp_content,ep.exp_content1,ep.exp_exploit_fix
		from exp_posts ep JOIN exp_users eu on ep.exp_author_id	=	eu.id JOIN exp_corps ec on ec.corps_id=ep.exp_post_producter where ep.id='".$id."'";
		
		
		$res	=	$post->query($sql);
		$res	=	$res[0];
		$author	=	new UsersModel();
		$users=		$author->findAll();
		
		$corps	=	new CorpsModel();
		$corps	=	$corps->findAll();
		
		$this->assign('users',$users);
		$this->assign("corps",$corps);
		$this->assign("list",$res);
		$this->display('modify');
	}
	
	/**
	 * 修改保存
	 */
	public function modifysave(){
		$post	=	new PostsModel();
		if ($post->autoCheckToken($_POST)){
			$id	=	intval($_POST['id']);
			$data['exp_post_no'] = htmlspecialchars($_POST['exp_post_no']);
			$data['exp_post_title'] = htmlspecialchars($_POST['bugtitle']);
			$data['exp_author_id'] = htmlspecialchars($_POST['author_id']);
			$data['exp_post_time'] = htmlspecialchars($_POST['posttime']);
			$data['exp_hazard_rating'] = intval($_POST['exp_hazard_rating']);
			$data['exp_exploit_rank'] = htmlspecialchars($_POST['exp_exploit_rank']);
			$data['exp_exploit_status'] = intval($_POST['exp_exploit_status']);
			$data['exp_description'] = htmlspecialchars($_POST['description']);
			$data['exp_content'] = htmlspecialchars($_POST['editor_content']);
			$data['exp_ok'] = $_POST['exp_ok'];
			$data['exp_content1'] = htmlspecialchars($_POST['editor_content1']);
			$data['exp_exploit_fix'] = htmlspecialchars($_POST['editor_content2']);
			$data['exp_ispub']	=	intval($_POST['exp_ispub']);
			$res	=	$post->where('id="'.$id.'"')->save($data);
			if($res>0){
				$this->assign('jumpUrl','Exploit/modify/id/'.$id);
				$this->success('更新成功,请点击返回');
			}else{
				$this->assign('jumpUrl','Exploit/modify/id/'.$id);
				$this->error('更新失败,请点击返回');
			}
			
			
		}
	}
	/**
	 * 漏洞详细信息
	 */
	public function getdetailexp(){
		$id	=	intval($_GET['postid']);
		$bugs	=	new Model();
		$judgeModel	=	new PostsModel();
		$judge	=	$judgeModel->where('id="'.$id.'"')->find();

		$sql='';
		if (($judge['other_bugtype']!='')&&($judge['other_corpname']!='')){
			$sql	=	"select ep.*,eu.exp_username from exp_posts ep JOIN exp_users eu on eu.id=ep.exp_author_id  where ep.id='$id' and ep.posts_confrim=0";
			
			//echo "两者都不为空";
		}
		if (($judge['other_bugtype']=='')&&($judge['other_corpname']!='')){
			//
			$sql	=	"select ep.*,eu.exp_username,eca.exp_bugtype from exp_posts ep  JOIN exp_users eu on eu.id=ep.exp_author_id join exp_category  eca on eca.exp_category_id=ep.exp_bugtype  where ep.id='".$id."' and ep.posts_confrim=0";

			//echo "漏洞分类为空,厂商名不为空";
		}
		if (($judge['other_bugtype']!='')&&($judge['other_corpname']=='')){
			//
			$sql	=	"select ec.exp_corpser, ep.*,eu.exp_username from exp_posts ep JOIN exp_users eu on eu.id=ep.exp_author_id JOIN exp_corps ec on ep.exp_post_producter=ec.corps_id where ep.id='".$id."' and ep.posts_confrim=0 ";
			//echo "漏洞分类不为空,厂商名为空";
		}
		if (($judge['other_bugtype']=='')&&($judge['other_corpname']=='')){
			//
			$sql	=	"select ep.*,ec.exp_corpser,eu.exp_username,eca.exp_bugtype from exp_posts ep JOIN exp_corps ec on ep.exp_post_producter=ec.corps_id  JOIN exp_users eu on eu.id=ep.exp_author_id join exp_category  eca on eca.exp_category_id=ep.exp_bugtype  where ep.id='".$id."' and ep.posts_confrim=0";
			//echo "漏洞分类为空,厂商名为空";
		}
		
		$res	=	$bugs->query($sql);
		echo sql;
		$data	=	array();
		foreach($res as $key=>$value){
			$data	=	$value;
		}
		$exp_hazard_rating	=	'';
		switch ($data['exp_hazard_rating']){
			case 1:
				$exp_hazard_rating	=	'低';
				break;
			case 2:
				$exp_hazard_rating	=	'中';
				break;
			case 3:
				$exp_hazard_rating	=	'高';
				break;
		}
		$exp_exploit_status	=	0;
		switch ($data['exp_exploit_status']){
			case 0:
				$exp_exploit_status	=	'正在联系厂商或者等待认领';
				break;
			case 1:
				$exp_exploit_status	=	'等待厂商处理';
				break;
			case 2:
				$exp_exploit_status	=	'未联系到厂商或者厂商积极忽略';
				break;
			case 3:
				$exp_exploit_status	=	'厂商已经确认';
				break;
			case 4:
				$exp_exploit_status	=	'漏洞已经通知厂商但是厂商忽略漏洞';
		}
		$replay	=	'';
		if ($data['exp_replay']==''){
			$replay	=	'暂无';
		}else{
			$replay	=	$data['exp_replay'];
		}
		$this->assign('replay',$replay);
		//获取留言信息
		$leavemsg	=	new PostcommentsModel();
		$msgs	=	$leavemsg->relation(true)->where('posts_id="'.$id.'"')->findAll();
		$this->assign('msgs',$msgs);
		
		
		$this->assign('exp_exploit_status',$exp_exploit_status);
		$this->assign('exp_hazard_rating',$exp_hazard_rating);
		$this->assign('list',$data);
		
		echo $this->display('detailexp');
		
	}
	
	/*
	 * 删除漏洞信息
	 */
	public function delpost(){
		$posts	=	new PostsModel();
		$id	=	intval($_GET['id']);
		$res	=	$posts->where('id="'.$id.'"')->delete();
		if($res>0){
			$this->assign('jumpUrl','exploit');
			$this->success('添加成功,请点击返回');
		}else{
			$this->assign('jumpUrl','exploit');
			$this->error('添加失败,请点击返回');
		}
		
	}
	
	public function showexpcate(){
			$category	=	new CategoryModel();
			$id	=	$_GET['id']?intval($_GET['id']):0;
			$result	=	$category->where("exp_category_fid=$id")->findAll();
			$this->assign('list',$result);
			echo $this->display('showexpcate');
	}
	
	/**
	 * 添加漏洞类型
	 */
	public function exploitype(){
		
		$exploit	=	new CategoryModel();
		if ($_POST){
		if($exploit->autoCheckToken($_POST)){
			if ($exploit->create()){
				import("ORG.Input");
				$data['exp_corptype']	= Input::getVar($_POST['corptype'])	;
				$data['exp_bugtype']	= Input::getVar($_POST['bugtype']);
				$data['exp_category_fid']	=	Input::getVar($_POST['bugtype_id']);

				$res	=	$exploit->add($data);
				if($res>0){
					$this->assign('jumpUrl','exploit/showexpcate');
					$this->success('添加成功,请点击返回');
				}else{
					$this->assign('jumpUrl','exploit/showexpcate');
					$this->error('添加失败,请点击返回');
				}			
			}else{
				$this->assign('jumpUrl','exploit/showexpcate');
				$this->error($exploit->getError());
			}
		}
		}else{
			$id	=	intval($_GET[id]);
			$corpsid	=	intval($_GET['corptype']);
			$this->assign("id",$id);
			$data=	array();
			$data['corpsid']	=	$corpsid;
			$this->assign("data",$data);
			echo $this->display('exploitype');
		}
	}
	
	public function delcate(){
		$id	=	intval($_GET['id']);
		$category	=	new CategoryModel();
		$isdel	=	$category->where("exp_category_fid='$id'")->count();

		if ($isdel>0){
					$this->assign('jumpUrl','exploit/showexpcate');
					$this->error('请先删除子类');
		}else{
			$res	=	$category->where('exp_category_id="'.$id.'"')->delete();
			if($res>0){
					$this->assign('jumpUrl','exploit/showexpcate');
					$this->success('删除成功,请点击返回');
				}else{
					$this->assign('jumpUrl','exploit/showexpcate');
					$this->error('删除失败,请点击返回');
				}	
		}
	}
	
	public function modifycate(){
		$id	=	intval($_GET['id']);
		$category	=	new CategoryModel();
		$res	=	$category->where('exp_category_id="'.$id.'"')->find();
		$data	=	array();
		$data['exp_corptype']	= $res['exp_corptype'];
		$data['exp_bugtype']	= $res['exp_bugtype'];
		$data['exp_category_id']	= $res['exp_category_id'];
		$data['exp_category_fid']	= $res['exp_category_fid'];
		
			
		$this->assign('data',$data);
		$this->display('modifycate');
	}
	
	public function updatecate(){
		$category	=	new CategoryModel();
	 if ($_POST){
		if($category->autoCheckToken($_POST)){
			if ($category->create()){
				import("ORG.Input");
				$data['exp_corptype']	= Input::getVar($_POST['corptype'])	;
				$data['exp_bugtype']	= Input::getVar($_POST['bugtype']);
				$exp_category_id	=	Input::getVar($_POST['bugtype_id']);

				$res	=	$category->where('exp_category_id="'.$exp_category_id.'"')->save($data);
				if($res>0){
					$this->assign('jumpUrl','exploit/showexpcate');
					$this->success('更新成功,请点击返回');
				}else{
					$this->assign('jumpUrl','exploit/showexpcate');
					$this->error('更新失败,请点击返回');
				}			
			}else{
				$this->assign('jumpUrl','exploit/showexpcate');
				$this->error($exploit->getError());
			}
		}
		}
	}
}